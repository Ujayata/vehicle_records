service: () -> {
    addVehicle: (record {latitude:text; vehicleType:text; licensePlate:text; fuelStatus:variant {Empty:int; Full:int; Half:int}; longitude:text}) -> (variant {Ok:record {id:text; latitude:text; vehicleType:text; licensePlate:text; createdAt:nat64; fuelStatus:variant {Empty:int; Full:int; Half:int}; updatedAt:opt nat64; longitude:text}; Err:variant {InvalidPayload:text; NotFound:text}});
    deleteVehicle: (text) -> (variant {Ok:record {id:text; latitude:text; vehicleType:text; licensePlate:text; createdAt:nat64; fuelStatus:variant {Empty:int; Full:int; Half:int}; updatedAt:opt nat64; longitude:text}; Err:variant {InvalidPayload:text; NotFound:text}});
    getVehicle: (text) -> (variant {Ok:record {id:text; latitude:text; vehicleType:text; licensePlate:text; createdAt:nat64; fuelStatus:variant {Empty:int; Full:int; Half:int}; updatedAt:opt nat64; longitude:text}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    getVehicles: () -> (variant {Ok:vec record {id:text; latitude:text; vehicleType:text; licensePlate:text; createdAt:nat64; fuelStatus:variant {Empty:int; Full:int; Half:int}; updatedAt:opt nat64; longitude:text}; Err:variant {InvalidPayload:text; NotFound:text}}) query;
    updateVehicle: (text, record {latitude:text; vehicleType:text; licensePlate:text; fuelStatus:variant {Empty:int; Full:int; Half:int}; longitude:text}) -> (variant {Ok:record {id:text; latitude:text; vehicleType:text; licensePlate:text; createdAt:nat64; fuelStatus:variant {Empty:int; Full:int; Half:int}; updatedAt:opt nat64; longitude:text}; Err:variant {InvalidPayload:text; NotFound:text}});
}
